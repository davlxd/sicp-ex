(define (f1 b n)
  (if (= n 0) 
    1
    (* b (f1 b (- n 1)))))


(define (square x)
  (* x x)
  )

(define (f2 b n)
  (cond ((= n 0) 1)
	((even? n) (square (f2 b (/ n 2))))
	(else (* b (f2 b (- n 1))))
	))
; (f2 2 1000)


(define (f3 b n)
  (define (iter b1 n1 value-so-far)
    (cond ((= n1 0) value-so-far)
	  ((even? n1) (iter (square b1) (/ n1 2 ) value-so-far))
	  (else (iter b1 (- n1 1 ) (* b1 value-so-far)))))
  (iter b n 1))

(f3 2 8)

; 13 
; 1 12
; 1 2 * 6
; 1 2 * 2 * 3
; 0 1 2 3 4 5
; 0 2 4 8 16 32

; 2^13
; 2 * 2^12
; 2 * (2^6)^2
; 2 * [(2^3)^2]^2
; 2 * []
;
;
;  1   2   3   4   5   6   7   8   9   10   11   12   13   14
;  2 4 8 16 32 64 128

; 2^100
; (2^50)^2
; ((2^25)^2)^2
; ((2 * 2^24)^2)^2
; ((2 * (2^12)^2)^2)^2
; ((2 * ((2^6)^2)^2)^2)^2
; ((2 * (((2^3)^2)^2)^2)^2)^2
; ((2 * (((2 * 2^2)^2)^2)^2)^2)^2
; ((2 * (((2 * 2^2)^2)^2)^2)^2)^2

; 2^64 x 2^36
; 2^64 x (2^32 x 2^4)
